// Code generated by github.com/filecoin-project/lotus/gen/api. DO NOT EDIT.

package api

import (
	"context"
	"github.com/filecoin-project/go-address"
	datatransfer "github.com/filecoin-project/go-data-transfer"
	"github.com/filecoin-project/go-fil-markets/piecestore"
	"github.com/filecoin-project/go-fil-markets/retrievalmarket"
	"github.com/filecoin-project/go-fil-markets/storagemarket"
	"github.com/filecoin-project/go-state-types/abi"
	"github.com/filecoin-project/venus-market/types"
	mTypes "github.com/filecoin-project/venus-messager/types"
	vTypes "github.com/filecoin-project/venus/pkg/types"
	"github.com/google/uuid"
	"github.com/ipfs/go-cid"
	"github.com/libp2p/go-libp2p-core/peer"
	"golang.org/x/xerrors"
	"time"
)

type MarketNodeStruct struct {
	Internal struct {
		ActorAddress func(p0 context.Context) (address.Address, error) `perm:"read"`

		ActorSectorSize func(p0 context.Context, p1 address.Address) (abi.SectorSize, error) `perm:"read"`

		DealsConsiderOfflineRetrievalDeals func(p0 context.Context) (bool, error) `perm:"admin"`

		DealsConsiderOfflineStorageDeals func(p0 context.Context) (bool, error) `perm:"admin"`

		DealsConsiderOnlineRetrievalDeals func(p0 context.Context) (bool, error) `perm:"admin"`

		DealsConsiderOnlineStorageDeals func(p0 context.Context) (bool, error) `perm:"admin"`

		DealsConsiderUnverifiedStorageDeals func(p0 context.Context) (bool, error) `perm:"admin"`

		DealsConsiderVerifiedStorageDeals func(p0 context.Context) (bool, error) `perm:"admin"`

		DealsImportData func(p0 context.Context, p1 cid.Cid, p2 string) error `perm:"admin"`

		DealsList func(p0 context.Context) ([]types.MarketDeal, error) `perm:"admin"`

		DealsPieceCidBlocklist func(p0 context.Context) ([]cid.Cid, error) `perm:"admin"`

		DealsSetConsiderOfflineRetrievalDeals func(p0 context.Context, p1 bool) error `perm:"admin"`

		DealsSetConsiderOfflineStorageDeals func(p0 context.Context, p1 bool) error `perm:"admin"`

		DealsSetConsiderOnlineRetrievalDeals func(p0 context.Context, p1 bool) error `perm:"admin"`

		DealsSetConsiderOnlineStorageDeals func(p0 context.Context, p1 bool) error `perm:"admin"`

		DealsSetConsiderUnverifiedStorageDeals func(p0 context.Context, p1 bool) error `perm:"admin"`

		DealsSetConsiderVerifiedStorageDeals func(p0 context.Context, p1 bool) error `perm:"admin"`

		DealsSetPieceCidBlocklist func(p0 context.Context, p1 []cid.Cid) error `perm:"admin"`

		MarketCancelDataTransfer func(p0 context.Context, p1 datatransfer.TransferID, p2 peer.ID, p3 bool) error `perm:"write"`

		MarketDataTransferUpdates func(p0 context.Context) (<-chan types.DataTransferChannel, error) `perm:"write"`

		MarketGetAsk func(p0 context.Context) (*storagemarket.SignedStorageAsk, error) `perm:"read"`

		MarketGetDealUpdates func(p0 context.Context) (<-chan storagemarket.MinerDeal, error) `perm:"read"`

		MarketGetRetrievalAsk func(p0 context.Context) (*retrievalmarket.Ask, error) `perm:"read"`

		MarketImportDealData func(p0 context.Context, p1 cid.Cid, p2 string) error `perm:"write"`

		MarketListDataTransfers func(p0 context.Context) ([]types.DataTransferChannel, error) `perm:"write"`

		MarketListDeals func(p0 context.Context) ([]types.MarketDeal, error) `perm:"read"`

		MarketListIncompleteDeals func(p0 context.Context) ([]storagemarket.MinerDeal, error) `perm:"read"`

		MarketListRetrievalDeals func(p0 context.Context) ([]retrievalmarket.ProviderDealState, error) `perm:"read"`

		MarketPendingDeals func(p0 context.Context) (types.PendingDealInfo, error) `perm:"write"`

		MarketPublishPendingDeals func(p0 context.Context) error `perm:"admin"`

		MarketRestartDataTransfer func(p0 context.Context, p1 datatransfer.TransferID, p2 peer.ID, p3 bool) error `perm:"write"`

		MarketSetAsk func(p0 context.Context, p1 vTypes.BigInt, p2 vTypes.BigInt, p3 abi.ChainEpoch, p4 abi.PaddedPieceSize, p5 abi.PaddedPieceSize) error `perm:"admin"`

		MarketSetRetrievalAsk func(p0 context.Context, p1 *retrievalmarket.Ask) error `perm:"admin"`

		MessagerGetMessage func(p0 context.Context, p1 uuid.UUID) (*mTypes.Message, error) `perm:"read"`

		MessagerPushMessage func(p0 context.Context, p1 *vTypes.Message, p2 *mTypes.MsgMeta) (uuid.UUID, error) `perm:"write"`

		MessagerWaitMessage func(p0 context.Context, p1 uuid.UUID) (*mTypes.Message, error) `perm:"read"`

		PiecesGetCIDInfo func(p0 context.Context, p1 cid.Cid) (*piecestore.CIDInfo, error) `perm:"read"`

		PiecesGetPieceInfo func(p0 context.Context, p1 cid.Cid) (*piecestore.PieceInfo, error) `perm:"read"`

		PiecesListCidInfos func(p0 context.Context) ([]cid.Cid, error) `perm:"read"`

		PiecesListPieces func(p0 context.Context) ([]cid.Cid, error) `perm:"read"`

		SectorGetSealDelay func(p0 context.Context) (time.Duration, error) `perm:"read"`

		SectorSetExpectedSealDuration func(p0 context.Context, p1 time.Duration) error `perm:"write"`
	}
}

type MarketNodeStub struct {
}

func (s *MarketNodeStruct) ActorAddress(p0 context.Context) (address.Address, error) {
	return s.Internal.ActorAddress(p0)
}

func (s *MarketNodeStub) ActorAddress(p0 context.Context) (address.Address, error) {
	return *new(address.Address), xerrors.New("method not supported")
}

func (s *MarketNodeStruct) ActorSectorSize(p0 context.Context, p1 address.Address) (abi.SectorSize, error) {
	return s.Internal.ActorSectorSize(p0, p1)
}

func (s *MarketNodeStub) ActorSectorSize(p0 context.Context, p1 address.Address) (abi.SectorSize, error) {
	return *new(abi.SectorSize), xerrors.New("method not supported")
}

func (s *MarketNodeStruct) DealsConsiderOfflineRetrievalDeals(p0 context.Context) (bool, error) {
	return s.Internal.DealsConsiderOfflineRetrievalDeals(p0)
}

func (s *MarketNodeStub) DealsConsiderOfflineRetrievalDeals(p0 context.Context) (bool, error) {
	return false, xerrors.New("method not supported")
}

func (s *MarketNodeStruct) DealsConsiderOfflineStorageDeals(p0 context.Context) (bool, error) {
	return s.Internal.DealsConsiderOfflineStorageDeals(p0)
}

func (s *MarketNodeStub) DealsConsiderOfflineStorageDeals(p0 context.Context) (bool, error) {
	return false, xerrors.New("method not supported")
}

func (s *MarketNodeStruct) DealsConsiderOnlineRetrievalDeals(p0 context.Context) (bool, error) {
	return s.Internal.DealsConsiderOnlineRetrievalDeals(p0)
}

func (s *MarketNodeStub) DealsConsiderOnlineRetrievalDeals(p0 context.Context) (bool, error) {
	return false, xerrors.New("method not supported")
}

func (s *MarketNodeStruct) DealsConsiderOnlineStorageDeals(p0 context.Context) (bool, error) {
	return s.Internal.DealsConsiderOnlineStorageDeals(p0)
}

func (s *MarketNodeStub) DealsConsiderOnlineStorageDeals(p0 context.Context) (bool, error) {
	return false, xerrors.New("method not supported")
}

func (s *MarketNodeStruct) DealsConsiderUnverifiedStorageDeals(p0 context.Context) (bool, error) {
	return s.Internal.DealsConsiderUnverifiedStorageDeals(p0)
}

func (s *MarketNodeStub) DealsConsiderUnverifiedStorageDeals(p0 context.Context) (bool, error) {
	return false, xerrors.New("method not supported")
}

func (s *MarketNodeStruct) DealsConsiderVerifiedStorageDeals(p0 context.Context) (bool, error) {
	return s.Internal.DealsConsiderVerifiedStorageDeals(p0)
}

func (s *MarketNodeStub) DealsConsiderVerifiedStorageDeals(p0 context.Context) (bool, error) {
	return false, xerrors.New("method not supported")
}

func (s *MarketNodeStruct) DealsImportData(p0 context.Context, p1 cid.Cid, p2 string) error {
	return s.Internal.DealsImportData(p0, p1, p2)
}

func (s *MarketNodeStub) DealsImportData(p0 context.Context, p1 cid.Cid, p2 string) error {
	return xerrors.New("method not supported")
}

func (s *MarketNodeStruct) DealsList(p0 context.Context) ([]types.MarketDeal, error) {
	return s.Internal.DealsList(p0)
}

func (s *MarketNodeStub) DealsList(p0 context.Context) ([]types.MarketDeal, error) {
	return *new([]types.MarketDeal), xerrors.New("method not supported")
}

func (s *MarketNodeStruct) DealsPieceCidBlocklist(p0 context.Context) ([]cid.Cid, error) {
	return s.Internal.DealsPieceCidBlocklist(p0)
}

func (s *MarketNodeStub) DealsPieceCidBlocklist(p0 context.Context) ([]cid.Cid, error) {
	return *new([]cid.Cid), xerrors.New("method not supported")
}

func (s *MarketNodeStruct) DealsSetConsiderOfflineRetrievalDeals(p0 context.Context, p1 bool) error {
	return s.Internal.DealsSetConsiderOfflineRetrievalDeals(p0, p1)
}

func (s *MarketNodeStub) DealsSetConsiderOfflineRetrievalDeals(p0 context.Context, p1 bool) error {
	return xerrors.New("method not supported")
}

func (s *MarketNodeStruct) DealsSetConsiderOfflineStorageDeals(p0 context.Context, p1 bool) error {
	return s.Internal.DealsSetConsiderOfflineStorageDeals(p0, p1)
}

func (s *MarketNodeStub) DealsSetConsiderOfflineStorageDeals(p0 context.Context, p1 bool) error {
	return xerrors.New("method not supported")
}

func (s *MarketNodeStruct) DealsSetConsiderOnlineRetrievalDeals(p0 context.Context, p1 bool) error {
	return s.Internal.DealsSetConsiderOnlineRetrievalDeals(p0, p1)
}

func (s *MarketNodeStub) DealsSetConsiderOnlineRetrievalDeals(p0 context.Context, p1 bool) error {
	return xerrors.New("method not supported")
}

func (s *MarketNodeStruct) DealsSetConsiderOnlineStorageDeals(p0 context.Context, p1 bool) error {
	return s.Internal.DealsSetConsiderOnlineStorageDeals(p0, p1)
}

func (s *MarketNodeStub) DealsSetConsiderOnlineStorageDeals(p0 context.Context, p1 bool) error {
	return xerrors.New("method not supported")
}

func (s *MarketNodeStruct) DealsSetConsiderUnverifiedStorageDeals(p0 context.Context, p1 bool) error {
	return s.Internal.DealsSetConsiderUnverifiedStorageDeals(p0, p1)
}

func (s *MarketNodeStub) DealsSetConsiderUnverifiedStorageDeals(p0 context.Context, p1 bool) error {
	return xerrors.New("method not supported")
}

func (s *MarketNodeStruct) DealsSetConsiderVerifiedStorageDeals(p0 context.Context, p1 bool) error {
	return s.Internal.DealsSetConsiderVerifiedStorageDeals(p0, p1)
}

func (s *MarketNodeStub) DealsSetConsiderVerifiedStorageDeals(p0 context.Context, p1 bool) error {
	return xerrors.New("method not supported")
}

func (s *MarketNodeStruct) DealsSetPieceCidBlocklist(p0 context.Context, p1 []cid.Cid) error {
	return s.Internal.DealsSetPieceCidBlocklist(p0, p1)
}

func (s *MarketNodeStub) DealsSetPieceCidBlocklist(p0 context.Context, p1 []cid.Cid) error {
	return xerrors.New("method not supported")
}

func (s *MarketNodeStruct) MarketCancelDataTransfer(p0 context.Context, p1 datatransfer.TransferID, p2 peer.ID, p3 bool) error {
	return s.Internal.MarketCancelDataTransfer(p0, p1, p2, p3)
}

func (s *MarketNodeStub) MarketCancelDataTransfer(p0 context.Context, p1 datatransfer.TransferID, p2 peer.ID, p3 bool) error {
	return xerrors.New("method not supported")
}

func (s *MarketNodeStruct) MarketDataTransferUpdates(p0 context.Context) (<-chan types.DataTransferChannel, error) {
	return s.Internal.MarketDataTransferUpdates(p0)
}

func (s *MarketNodeStub) MarketDataTransferUpdates(p0 context.Context) (<-chan types.DataTransferChannel, error) {
	return nil, xerrors.New("method not supported")
}

func (s *MarketNodeStruct) MarketGetAsk(p0 context.Context) (*storagemarket.SignedStorageAsk, error) {
	return s.Internal.MarketGetAsk(p0)
}

func (s *MarketNodeStub) MarketGetAsk(p0 context.Context) (*storagemarket.SignedStorageAsk, error) {
	return nil, xerrors.New("method not supported")
}

func (s *MarketNodeStruct) MarketGetDealUpdates(p0 context.Context) (<-chan storagemarket.MinerDeal, error) {
	return s.Internal.MarketGetDealUpdates(p0)
}

func (s *MarketNodeStub) MarketGetDealUpdates(p0 context.Context) (<-chan storagemarket.MinerDeal, error) {
	return nil, xerrors.New("method not supported")
}

func (s *MarketNodeStruct) MarketGetRetrievalAsk(p0 context.Context) (*retrievalmarket.Ask, error) {
	return s.Internal.MarketGetRetrievalAsk(p0)
}

func (s *MarketNodeStub) MarketGetRetrievalAsk(p0 context.Context) (*retrievalmarket.Ask, error) {
	return nil, xerrors.New("method not supported")
}

func (s *MarketNodeStruct) MarketImportDealData(p0 context.Context, p1 cid.Cid, p2 string) error {
	return s.Internal.MarketImportDealData(p0, p1, p2)
}

func (s *MarketNodeStub) MarketImportDealData(p0 context.Context, p1 cid.Cid, p2 string) error {
	return xerrors.New("method not supported")
}

func (s *MarketNodeStruct) MarketListDataTransfers(p0 context.Context) ([]types.DataTransferChannel, error) {
	return s.Internal.MarketListDataTransfers(p0)
}

func (s *MarketNodeStub) MarketListDataTransfers(p0 context.Context) ([]types.DataTransferChannel, error) {
	return *new([]types.DataTransferChannel), xerrors.New("method not supported")
}

func (s *MarketNodeStruct) MarketListDeals(p0 context.Context) ([]types.MarketDeal, error) {
	return s.Internal.MarketListDeals(p0)
}

func (s *MarketNodeStub) MarketListDeals(p0 context.Context) ([]types.MarketDeal, error) {
	return *new([]types.MarketDeal), xerrors.New("method not supported")
}

func (s *MarketNodeStruct) MarketListIncompleteDeals(p0 context.Context) ([]storagemarket.MinerDeal, error) {
	return s.Internal.MarketListIncompleteDeals(p0)
}

func (s *MarketNodeStub) MarketListIncompleteDeals(p0 context.Context) ([]storagemarket.MinerDeal, error) {
	return *new([]storagemarket.MinerDeal), xerrors.New("method not supported")
}

func (s *MarketNodeStruct) MarketListRetrievalDeals(p0 context.Context) ([]retrievalmarket.ProviderDealState, error) {
	return s.Internal.MarketListRetrievalDeals(p0)
}

func (s *MarketNodeStub) MarketListRetrievalDeals(p0 context.Context) ([]retrievalmarket.ProviderDealState, error) {
	return *new([]retrievalmarket.ProviderDealState), xerrors.New("method not supported")
}

func (s *MarketNodeStruct) MarketPendingDeals(p0 context.Context) (types.PendingDealInfo, error) {
	return s.Internal.MarketPendingDeals(p0)
}

func (s *MarketNodeStub) MarketPendingDeals(p0 context.Context) (types.PendingDealInfo, error) {
	return *new(types.PendingDealInfo), xerrors.New("method not supported")
}

func (s *MarketNodeStruct) MarketPublishPendingDeals(p0 context.Context) error {
	return s.Internal.MarketPublishPendingDeals(p0)
}

func (s *MarketNodeStub) MarketPublishPendingDeals(p0 context.Context) error {
	return xerrors.New("method not supported")
}

func (s *MarketNodeStruct) MarketRestartDataTransfer(p0 context.Context, p1 datatransfer.TransferID, p2 peer.ID, p3 bool) error {
	return s.Internal.MarketRestartDataTransfer(p0, p1, p2, p3)
}

func (s *MarketNodeStub) MarketRestartDataTransfer(p0 context.Context, p1 datatransfer.TransferID, p2 peer.ID, p3 bool) error {
	return xerrors.New("method not supported")
}

func (s *MarketNodeStruct) MarketSetAsk(p0 context.Context, p1 vTypes.BigInt, p2 vTypes.BigInt, p3 abi.ChainEpoch, p4 abi.PaddedPieceSize, p5 abi.PaddedPieceSize) error {
	return s.Internal.MarketSetAsk(p0, p1, p2, p3, p4, p5)
}

func (s *MarketNodeStub) MarketSetAsk(p0 context.Context, p1 vTypes.BigInt, p2 vTypes.BigInt, p3 abi.ChainEpoch, p4 abi.PaddedPieceSize, p5 abi.PaddedPieceSize) error {
	return xerrors.New("method not supported")
}

func (s *MarketNodeStruct) MarketSetRetrievalAsk(p0 context.Context, p1 *retrievalmarket.Ask) error {
	return s.Internal.MarketSetRetrievalAsk(p0, p1)
}

func (s *MarketNodeStub) MarketSetRetrievalAsk(p0 context.Context, p1 *retrievalmarket.Ask) error {
	return xerrors.New("method not supported")
}

func (s *MarketNodeStruct) MessagerGetMessage(p0 context.Context, p1 uuid.UUID) (*mTypes.Message, error) {
	return s.Internal.MessagerGetMessage(p0, p1)
}

func (s *MarketNodeStub) MessagerGetMessage(p0 context.Context, p1 uuid.UUID) (*mTypes.Message, error) {
	return nil, xerrors.New("method not supported")
}

func (s *MarketNodeStruct) MessagerPushMessage(p0 context.Context, p1 *vTypes.Message, p2 *mTypes.MsgMeta) (uuid.UUID, error) {
	return s.Internal.MessagerPushMessage(p0, p1, p2)
}

func (s *MarketNodeStub) MessagerPushMessage(p0 context.Context, p1 *vTypes.Message, p2 *mTypes.MsgMeta) (uuid.UUID, error) {
	return *new(uuid.UUID), xerrors.New("method not supported")
}

func (s *MarketNodeStruct) MessagerWaitMessage(p0 context.Context, p1 uuid.UUID) (*mTypes.Message, error) {
	return s.Internal.MessagerWaitMessage(p0, p1)
}

func (s *MarketNodeStub) MessagerWaitMessage(p0 context.Context, p1 uuid.UUID) (*mTypes.Message, error) {
	return nil, xerrors.New("method not supported")
}

func (s *MarketNodeStruct) PiecesGetCIDInfo(p0 context.Context, p1 cid.Cid) (*piecestore.CIDInfo, error) {
	return s.Internal.PiecesGetCIDInfo(p0, p1)
}

func (s *MarketNodeStub) PiecesGetCIDInfo(p0 context.Context, p1 cid.Cid) (*piecestore.CIDInfo, error) {
	return nil, xerrors.New("method not supported")
}

func (s *MarketNodeStruct) PiecesGetPieceInfo(p0 context.Context, p1 cid.Cid) (*piecestore.PieceInfo, error) {
	return s.Internal.PiecesGetPieceInfo(p0, p1)
}

func (s *MarketNodeStub) PiecesGetPieceInfo(p0 context.Context, p1 cid.Cid) (*piecestore.PieceInfo, error) {
	return nil, xerrors.New("method not supported")
}

func (s *MarketNodeStruct) PiecesListCidInfos(p0 context.Context) ([]cid.Cid, error) {
	return s.Internal.PiecesListCidInfos(p0)
}

func (s *MarketNodeStub) PiecesListCidInfos(p0 context.Context) ([]cid.Cid, error) {
	return *new([]cid.Cid), xerrors.New("method not supported")
}

func (s *MarketNodeStruct) PiecesListPieces(p0 context.Context) ([]cid.Cid, error) {
	return s.Internal.PiecesListPieces(p0)
}

func (s *MarketNodeStub) PiecesListPieces(p0 context.Context) ([]cid.Cid, error) {
	return *new([]cid.Cid), xerrors.New("method not supported")
}

func (s *MarketNodeStruct) SectorGetSealDelay(p0 context.Context) (time.Duration, error) {
	return s.Internal.SectorGetSealDelay(p0)
}

func (s *MarketNodeStub) SectorGetSealDelay(p0 context.Context) (time.Duration, error) {
	return *new(time.Duration), xerrors.New("method not supported")
}

func (s *MarketNodeStruct) SectorSetExpectedSealDuration(p0 context.Context, p1 time.Duration) error {
	return s.Internal.SectorSetExpectedSealDuration(p0, p1)
}

func (s *MarketNodeStub) SectorSetExpectedSealDuration(p0 context.Context, p1 time.Duration) error {
	return xerrors.New("method not supported")
}

var _ MarketNode = new(MarketNodeStruct)
